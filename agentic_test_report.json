{
  "test_results": {
    "unit_tests": {
      "success": false,
      "output": "============================= test session starts ==============================\nplatform darwin -- Python 3.13.3, pytest-8.4.1, pluggy-1.6.0 -- /Users/JJR/TokenGoblin/venv/bin/python\ncachedir: .pytest_cache\nrootdir: /Users/JJR/TokenGoblin\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, asyncio-1.1.0, cov-6.2.1, langsmith-0.4.8\nasyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 15 items\n\ntest_agentic_functionality.py::TestAgenticFunctionality::test_agentic_sales_detection PASSED [  6%]\ntest_agentic_functionality.py::TestAgenticFunctionality::test_token_amount_calculation FAILED [ 13%]\ntest_agentic_functionality.py::TestAgenticFunctionality::test_payment_method_recognition PASSED [ 20%]\ntest_agentic_functionality.py::TestAgenticFunctionality::test_proactive_greeting_sales_offer PASSED [ 26%]\ntest_agentic_functionality.py::TestAgenticFunctionality::test_agentic_sales_response_structure PASSED [ 33%]\ntest_agentic_functionality.py::TestAgenticFunctionality::test_agentic_suggestions FAILED [ 40%]\ntest_agentic_functionality.py::TestAgenticFunctionality::test_proactive_follow_up_generation PASSED [ 46%]\ntest_agentic_functionality.py::TestAgenticFunctionality::test_conversation_flow_prioritization PASSED [ 53%]\ntest_agentic_functionality.py::TestAgenticFunctionality::test_agentic_language_consistency PASSED [ 60%]\ntest_agentic_functionality.py::TestAgenticFunctionality::test_token_package_recommendations FAILED [ 66%]\ntest_agentic_functionality.py::TestAgenticFunctionality::test_payment_options_presentation FAILED [ 73%]\ntest_agentic_functionality.py::TestAgenticFunctionality::test_agentic_action_prompts FAILED [ 80%]\ntest_agentic_functionality.py::TestAgenticFunctionality::test_user_context_integration PASSED [ 86%]\ntest_agentic_functionality.py::TestAgenticFunctionality::test_emotional_intelligence_integration PASSED [ 93%]\ntest_agentic_functionality.py::TestAgenticFunctionality::test_conversation_memory_integration FAILED [100%]\n\n=================================== FAILURES ===================================\n____________ TestAgenticFunctionality.test_token_amount_calculation ____________\ntest_agentic_functionality.py:109: in test_token_amount_calculation\n    assert str(expected_price) in response, f\"Price {expected_price} not found in response for {token_amount} tokens\"\nE   AssertionError: Price 45.0 not found in response for 2500 tokens\nE   assert '45.0' in \"\ud83c\udfaf Perfect! I found your token request: **2,500 tokens**\\n\\n\ud83d\udce6 **Package**: Developer Pack\\n\ud83d\udcb0 **Price**: $95.00 USD\\n\u26a1 **Delivery**: Instant after payment\\n\\n**Agentic Action**: I'm ready to process your order! Just tell me your preferred payment method:\\n\u2022 USDT (TRC20) - Fastest processing\\n\u2022 Bitcoin (BTC) - Most popular\\n\u2022 Ethereum (ETH) - Widely accepted\\n\\nOr say 'proceed' and I'll create your payment request right now! \ud83d\ude80\"\nE    +  where '45.0' = str(45.0)\n______________ TestAgenticFunctionality.test_agentic_suggestions _______________\ntest_agentic_functionality.py:180: in test_agentic_suggestions\n    assert \"Agentic Action\" in suggestion or \"Instant\" in suggestion or \"Smart\" in suggestion\nE   AssertionError: assert ('Agentic Action' in 'Would you like me to explain how AI tokens work? \ud83e\udd14' or 'Instant' in 'Would you like me to explain how AI tokens work? \ud83e\udd14' or 'Smart' in 'Would you like me to explain how AI tokens work? \ud83e\udd14')\n_________ TestAgenticFunctionality.test_token_package_recommendations __________\ntest_agentic_functionality.py:255: in test_token_package_recommendations\n    assert \"1,000 tokens\" in response\nE   assert '1,000 tokens' in \"\ud83e\udd16 **Agentic Mode Active** - I'm here to help you get tokens quickly!\\n\\n**What I need from you:**\\n1. **Token amount** (e.g., '1000 tokens' or '5k tokens')\\n2. **Payment method** (USDT, BTC, or ETH)\\n\\n**What I'll do:**\\n\u2022 Calculate the best price\\n\u2022 Create your payment request\\n\u2022 Process your order instantly\\n\u2022 Deliver tokens to your account\\n\\nJust tell me what you need, and I'll take care of everything! \ud83d\ude80\"\n__________ TestAgenticFunctionality.test_payment_options_presentation __________\ntest_agentic_functionality.py:276: in test_payment_options_presentation\n    assert \"TRC20\" in response or \"ERC20\" in response\nE   assert ('TRC20' in \"\ud83e\udd16 **Agentic Mode Active** - I'm here to help you get tokens quickly!\\n\\n**What I need from you:**\\n1. **Token amount** (e.g., '1000 tokens' or '5k tokens')\\n2. **Payment method** (USDT, BTC, or ETH)\\n\\n**What I'll do:**\\n\u2022 Calculate the best price\\n\u2022 Create your payment request\\n\u2022 Process your order instantly\\n\u2022 Deliver tokens to your account\\n\\nJust tell me what you need, and I'll take care of everything! \ud83d\ude80\" or 'ERC20' in \"\ud83e\udd16 **Agentic Mode Active** - I'm here to help you get tokens quickly!\\n\\n**What I need from you:**\\n1. **Token amount** (e.g., '1000 tokens' or '5k tokens')\\n2. **Payment method** (USDT, BTC, or ETH)\\n\\n**What I'll do:**\\n\u2022 Calculate the best price\\n\u2022 Create your payment request\\n\u2022 Process your order instantly\\n\u2022 Deliver tokens to your account\\n\\nJust tell me what you need, and I'll take care of everything! \ud83d\ude80\")\n_____________ TestAgenticFunctionality.test_agentic_action_prompts _____________\ntest_agentic_functionality.py:289: in test_agentic_action_prompts\n    assert \"Agentic Action\" in response\nE   assert 'Agentic Action' in \"\ud83e\udd16 **Agentic Mode Active** - I'm here to help you get tokens quickly!\\n\\n**What I need from you:**\\n1. **Token amount** (e.g., '1000 tokens' or '5k tokens')\\n2. **Payment method** (USDT, BTC, or ETH)\\n\\n**What I'll do:**\\n\u2022 Calculate the best price\\n\u2022 Create your payment request\\n\u2022 Process your order instantly\\n\u2022 Deliver tokens to your account\\n\\nJust tell me what you need, and I'll take care of everything! \ud83d\ude80\"\n________ TestAgenticFunctionality.test_conversation_memory_integration _________\ntest_agentic_functionality.py:333: in test_conversation_memory_integration\n    assert \"proceed\" in response.lower() or \"continue\" in response.lower()\nE   assert ('proceed' in \"\ud83e\udd16 **agentic mode active** - i'm here to help you get tokens quickly!\\n\\n**what i need from you:**\\n1. **token amount** (e.g., '1000 tokens' or '5k tokens')\\n2. **payment method** (usdt, btc, or eth)\\n\\n**what i'll do:**\\n\u2022 calculate the best price\\n\u2022 create your payment request\\n\u2022 process your order instantly\\n\u2022 deliver tokens to your account\\n\\njust tell me what you need, and i'll take care of everything! \ud83d\ude80\" or 'continue' in \"\ud83e\udd16 **agentic mode active** - i'm here to help you get tokens quickly!\\n\\n**what i need from you:**\\n1. **token amount** (e.g., '1000 tokens' or '5k tokens')\\n2. **payment method** (usdt, btc, or eth)\\n\\n**what i'll do:**\\n\u2022 calculate the best price\\n\u2022 create your payment request\\n\u2022 process your order instantly\\n\u2022 deliver tokens to your account\\n\\njust tell me what you need, and i'll take care of everything! \ud83d\ude80\")\nE    +  where \"\ud83e\udd16 **agentic mode active** - i'm here to help you get tokens quickly!\\n\\n**what i need from you:**\\n1. **token amount** (e.g., '1000 tokens' or '5k tokens')\\n2. **payment method** (usdt, btc, or eth)\\n\\n**what i'll do:**\\n\u2022 calculate the best price\\n\u2022 create your payment request\\n\u2022 process your order instantly\\n\u2022 deliver tokens to your account\\n\\njust tell me what you need, and i'll take care of everything! \ud83d\ude80\" = <built-in method lower of str object at 0x1432ac800>()\nE    +    where <built-in method lower of str object at 0x1432ac800> = \"\ud83e\udd16 **Agentic Mode Active** - I'm here to help you get tokens quickly!\\n\\n**What I need from you:**\\n1. **Token amount** (e.g., '1000 tokens' or '5k tokens')\\n2. **Payment method** (USDT, BTC, or ETH)\\n\\n**What I'll do:**\\n\u2022 Calculate the best price\\n\u2022 Create your payment request\\n\u2022 Process your order instantly\\n\u2022 Deliver tokens to your account\\n\\nJust tell me what you need, and I'll take care of everything! \ud83d\ude80\".lower\nE    +  and   \"\ud83e\udd16 **agentic mode active** - i'm here to help you get tokens quickly!\\n\\n**what i need from you:**\\n1. **token amount** (e.g., '1000 tokens' or '5k tokens')\\n2. **payment method** (usdt, btc, or eth)\\n\\n**what i'll do:**\\n\u2022 calculate the best price\\n\u2022 create your payment request\\n\u2022 process your order instantly\\n\u2022 deliver tokens to your account\\n\\njust tell me what you need, and i'll take care of everything! \ud83d\ude80\" = <built-in method lower of str object at 0x1432ac800>()\nE    +    where <built-in method lower of str object at 0x1432ac800> = \"\ud83e\udd16 **Agentic Mode Active** - I'm here to help you get tokens quickly!\\n\\n**What I need from you:**\\n1. **Token amount** (e.g., '1000 tokens' or '5k tokens')\\n2. **Payment method** (USDT, BTC, or ETH)\\n\\n**What I'll do:**\\n\u2022 Calculate the best price\\n\u2022 Create your payment request\\n\u2022 Process your order instantly\\n\u2022 Deliver tokens to your account\\n\\nJust tell me what you need, and I'll take care of everything! \ud83d\ude80\".lower\n=========================== short test summary info ============================\nFAILED test_agentic_functionality.py::TestAgenticFunctionality::test_token_amount_calculation\nFAILED test_agentic_functionality.py::TestAgenticFunctionality::test_agentic_suggestions\nFAILED test_agentic_functionality.py::TestAgenticFunctionality::test_token_package_recommendations\nFAILED test_agentic_functionality.py::TestAgenticFunctionality::test_payment_options_presentation\nFAILED test_agentic_functionality.py::TestAgenticFunctionality::test_agentic_action_prompts\nFAILED test_agentic_functionality.py::TestAgenticFunctionality::test_conversation_memory_integration\n========================= 6 failed, 9 passed in 4.12s ==========================\n",
      "error": "",
      "return_code": 1
    },
    "integration_tests": {
      "success": false,
      "output": "============================= test session starts ==============================\nplatform darwin -- Python 3.13.3, pytest-8.4.1, pluggy-1.6.0 -- /Users/JJR/TokenGoblin/venv/bin/python\ncachedir: .pytest_cache\nrootdir: /Users/JJR/TokenGoblin\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, asyncio-1.1.0, cov-6.2.1, langsmith-0.4.8\nasyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_________________ ERROR collecting test_agentic_integration.py _________________\nImportError while importing test module '/Users/JJR/TokenGoblin/test_agentic_integration.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\ntest_agentic_integration.py:20: in <module>\n    from run_agentic import handle_conversational_ai_message\nE   ImportError: cannot import name 'handle_conversational_ai_message' from 'run_agentic' (/Users/JJR/TokenGoblin/run_agentic.py)\n=========================== short test summary info ============================\nERROR test_agentic_integration.py\n=============================== 1 error in 1.12s ===============================\n",
      "error": "ERROR: found no collectors for /Users/JJR/TokenGoblin/test_agentic_integration.py::TestAgenticIntegration\n\n",
      "return_code": 4
    },
    "effectiveness_tests": {
      "success": false,
      "output": "============================= test session starts ==============================\nplatform darwin -- Python 3.13.3, pytest-8.4.1, pluggy-1.6.0 -- /Users/JJR/TokenGoblin/venv/bin/python\ncachedir: .pytest_cache\nrootdir: /Users/JJR/TokenGoblin\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, asyncio-1.1.0, cov-6.2.1, langsmith-0.4.8\nasyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_________________ ERROR collecting test_agentic_integration.py _________________\nImportError while importing test module '/Users/JJR/TokenGoblin/test_agentic_integration.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\ntest_agentic_integration.py:20: in <module>\n    from run_agentic import handle_conversational_ai_message\nE   ImportError: cannot import name 'handle_conversational_ai_message' from 'run_agentic' (/Users/JJR/TokenGoblin/run_agentic.py)\n=========================== short test summary info ============================\nERROR test_agentic_integration.py\n=============================== 1 error in 1.10s ===============================\n",
      "error": "ERROR: found no collectors for /Users/JJR/TokenGoblin/test_agentic_integration.py::TestAgenticEffectivenessMetrics\n\n",
      "return_code": 4
    },
    "total_time": 8.380604028701782,
    "timestamp": "2025-07-26T11:20:18.414859"
  },
  "summary": {
    "total_suites": 3,
    "passed_suites": 0,
    "total_time": 8.380604028701782,
    "timestamp": "2025-07-26T11:20:18.414859"
  }
}